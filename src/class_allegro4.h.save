#ifndef AL_INIT_H_INCLUDED
#define AL_INIT_H_INCLUDED

/**
    *****************
    * CLASS ALLEGRO *
    *****************

    - Clase dedicada para manejar la libreria Allegro
*/

/// GLOBALES ------------------------------------------------------

ALLEGRO_DISPLAY *display = NULL;
ALLEGRO_EVENT_QUEUE *event_queue = NULL;
ALLEGRO_TIMER *timer = NULL;
ALLEGRO_FONT *keepcalm24,*farial,*keepcalm12,*keepcalm_med,*dayslater36,*dayslater_big;
ALLEGRO_EVENT ev;
ALLEGRO_BITMAP *menu_select;
ALLEGRO_TRANSFORM camera;
ALLEGRO_SAMPLE *weapons_audios[4];

enum{NOROESTE,NORTE,NORESTE,ESTE,OESTE,SUDOESTE,SUR,SURESTE,QUIETO};
enum WEAP{PISTOL,SHOTGUN,UZI,ASSAULT};
enum WEAP_STATE{SELECTED,UNSELECTED};
enum ENEMY_STATE{INMOVIL,PERSIGUIENDO,VOLVIENDO};
enum ENEMY_AI{EASY,NORMAL,HARD};
enum KEYS{UP,DOWN,LEFT,RIGHT,SPACE,ONE,TAB};

bool keys[7]={0,0,0,0,0,0,0};
bool game_running = false;  /// Controla si hay una partida en curso
bool saved = false;         /// Controla si se guardo o no la partida
bool view_info = false;

int ANCHO,ALTO;
int ANCHO_MAPA,ALTO_MAPA;
const int NUM_BULLETS = 10;
const int NUM_ENEMIES = 40;
float camx = 0, camy = 0;
int x_mouse = 0,y_mouse = 0;
/// ----------------------------------------------------------------

class Allegro{

    private:
        double new_time,old_time;
        int cont,fps,last_fps;

    public:

        Allegro(int,int);
        void install_addons();
        void load_fonts();
        void load_samples();
        void register_events();
        void terminate_allegro();

        /// Mostrar Info
        void showMousePos(int,int);
        void showFps();
};


Allegro::Allegro(int W=800,int H=600){

    al_init();

    /// Crear ventana y limpiar fondo
    display = al_create_display(W,H);
    ANCHO = al_get_display_width(display);
    ALTO = al_get_display_height(display);
    al_clear_to_color(al_map_rgb(20,20,20));


    /// Inicializar variables para calcular FPS
    cont = 0;
    fps = 60;
    old_time = al_get_time();
    last_fps = 0;
    timer = al_create_timer(1.0/FPS);


}

void Allegro::install_addons(){

    /// Instalación de addons
    al_init_font_addon();
    al_init_ttf_addon();
    al_init_primitives_addon();
    al_install_keyboard();
    al_install_mouse();
    al_init_image_addon();
    al_install_audio();
    al_init_acodec_addon();
}

void Allegro::load_fonts(){

    /// Fuentes
    keepcalm24 = al_load_font("fonts/KeepCalm-Medium.ttf",48,0);
    keepcalm_med = al_load_font("fonts/KeepCalm-Medium.ttf",24,0);
    keepcalm12 = al_load_font("fonts/KeepCalm-Medium.ttf",12,0);
    farial = al_load_font("fonts/arial.ttf",16,0);
    dayslater36 = al_load_font("fonts/28DaysLater.ttf",48,0);
    dayslater_big = al_load_font("fonts/28DaysLater.ttf",96,0);
}

void Allegro::load_samples(){

    al_reserve_samples(4);
    weapons_audios[PISTOL] = al_load_sample("resources/sounds/snd_pistol.wav");
    weapons_audios[SHOTGUN] = al_load_sample("resources/sounds/snd_shotgun.wav");
    weapons_audios[UZI] = al_load_sample("resources/sounds/snd_uzi.wav");
    weapons_audios[ASSAULT] = al_load_sample("resources/sounds/snd_assault.wav");
}

void Allegro::register_events(){

    event_queue = al_create_event_queue();

    /// Registrar eventos
    al_register_event_source(event_queue,al_get_timer_event_source(timer));
    al_register_event_source(event_queue, al_get_keyboard_event_source());
    al_register_event_source(event_queue, al_get_display_event_source(display));
    al_register_event_source(event_queue, al_get_mouse_event_source());
}

void Allegro::terminate_allegro(){

    al_destroy_bitmap(menu_select);
    al_destroy_display(display);
    al_destroy_timer(timer);
    al_destroy_sample(weapons_audios[PISTOL]);
    al_destroy_sample(weapons_audios[SHOTGUN]);
    al_destroy_sample(weapons_audios[UZI]);
    al_destroy_sample(weapons_audios[ASSAULT]);
}



///*******************************
///*        MOSTRAR INFO         *
///*******************************

void Allegro::showMousePos(int x, int y){

    /// Muestra pos del mouse
    al_draw_textf(keepcalm12,al_map_rgb(200,200,200),ANCHO-104+camx,ALTO-30+camy,0,"MOUSE X: %i",x);
    al_draw_textf(keepcalm12,al_map_rgb(200,200,200),ANCHO-51+camx,ALTO-15+camy,0,"Y: %i",y);
}

void Allegro::showFps(){

    /// Calcular FPS
    new_time = al_get_time();
    fps = 1.0/(new_time - old_time);
    old_time = new_time;
    if(cont++ == 60){

        last_fps = fps;
        cont = 0;
    }
    al_draw_textf(keepcalm12,al_map_rgb(180,180,180),5+camx,ALTO-30+camy,0,"FPS: %i",(int)last_fps);
}

///*******************************
///*           EXTRAS            *
///*******************************

void cameraUpdate(float x, float y, int w, int h){

    camx = -(ANCHO/2) + (x + w/2);
    camy = -(ALTO/2) + (y + h/2);

    if(camx < 0)
        camx = 0;

    if(camy < 0)
        camy = 0;
}

#endif // AL_INIT_H_INCLUDED
